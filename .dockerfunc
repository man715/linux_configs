#!/bin/bash
# Bash wrappers for docker run commands

export DOCKER_REPO_PREFIX=jess

#
# Helper Functions
#
dcleanup(){
	local containers
	mapfile -t containers < <(docker ps -aq 2>/dev/null)
	docker rm "${containers[@]}" 2>/dev/null
	local volumes
	mapfile -t volumes < <(docker ps --filter status=exited -q 2>/dev/null)
	docker rm -v "${volumes[@]}" 2>/dev/null
	local images
	mapfile -t images < <(docker images --filter dangling=true -q 2>/dev/null)
	docker rmi "${images[@]}" 2>/dev/null
}
del_stopped(){
	local name=$1
	local state
	state=$(docker inspect --format "{{.State.Running}}" "$name" 2>/dev/null)

	if [[ "$state" == "false" ]]; then
		docker rm "$name"
	fi
}
run_stopped(){
    local name=$1
    local state
    state=$(docker inspect --format "{{.State.Running}}" "$name" 2>/dev/null)
    if [[ "$state" == "false" ]]; then
        docker start "$name"
    elif [[ "$state" == "true" ]]; then
        docker stop "$name"
        docker start "$name"
    fi
}
rmctr(){
	# shellcheck disable=SC2068
	docker rm -f $@ 2>/dev/null || true
}
relies_on(){
	for container in "$@"; do
		local state
		state=$(docker inspect --format "{{.State.Running}}" "$container" 2>/dev/null)

		if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
			echo "$container is not running, starting it for you."
			$container
		fi
	done
}
#
# Container Aliases
#
apt_file(){
	docker run --rm -it \
		--name apt-file \
		${DOCKER_REPO_PREFIX}/apt-file
}
alias apt-file="apt_file"
audacity(){
	del_stopped audacity

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e "DISPLAY=unix${DISPLAY}" \
		-e QT_DEVICE_PIXEL_RATIO \
		--device /dev/snd \
		--group-add audio \
		--name audacity \
		${DOCKER_REPO_PREFIX}/audacity
}
aws(){
	docker run -it --rm \
		-v "${HOME}/.aws:/root/.aws" \
		--log-driver none \
		--name aws \
		${DOCKER_REPO_PREFIX}/awscli "$@"
}
az(){
	docker run -it --rm \
		-v "${HOME}/.azure:/root/.azure" \
		--log-driver none \
		${DOCKER_REPO_PREFIX}/azure-cli "$@"
}
cadvisor(){
	docker run -d \
		--restart always \
		-v /:/rootfs:ro \
		-v /var/run:/var/run:rw \
		-v /sys:/sys:ro  \
		-v /var/lib/docker/:/var/lib/docker:ro \
		-p 1234:8080 \
		--name cadvisor \
		gcr.io/cadvisor/cadvisor

	browser-exec "http://localhost:1234"
}
chrome(){
	# add flags for proxy if passed
	local proxy=
	local map
	local args=$*
	if [[ "$1" == "tor" ]]; then
		relies_on torbridge

		map="MAP * ~NOTFOUND , EXCLUDE torproxy"
		proxy="socks5://torproxy:9050"
		args="https://check.torproject.org/api/ip ${*:2}"
	fi

	del_stopped chrome

	# one day remove /etc/hosts bind mount when effing
	# overlay support inotify, such bullshit
	docker run -d \
		--memory 3gb \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e "DISPLAY=unix${DISPLAY}" \
		-v "${HOME}/Downloads:/root/Downloads" \
		-v "${HOME}/Pictures:/root/Pictures" \
		-v "${HOME}/Torrents:/root/Torrents" \
		-v /dev/shm:/dev/shm \
		-v /etc/hosts:/etc/hosts \
		--security-opt seccomp:/etc/docker/seccomp/chrome.json \
		--device /dev/snd \
		--device /dev/dri \
		--device /dev/video0 \
		--device /dev/usb \
		--device /dev/bus/usb \
		--group-add audio \
		--group-add video \
		--name chrome \
		${DOCKER_REPO_PREFIX}/chrome --user-data-dir=/data \
		--proxy-server="$proxy" \
		--host-resolver-rules="$map" "$args"

}
discord(){
    run_stopped discord
    docker run -it --net host \
        -v /tmp/.x11-unix/:/tmp/.x11-unix \
        -e DISPLAY=unix$DISPLAY \
        --device /dev/snd \
        --device /dev/dri \
        -v /dev/shm:/dev/shm \
        --name discord \
        man715/discord:1.0 &

    sleep 2
    # exit current shell
    exit 0
}

firefox(){
	del_stopped firefox

	docker run -d \
		--memory 2gb \
		--net host \
		--cpuset-cpus 0 \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-v "${HOME}/.firefox/cache:/root/.cache/mozilla" \
		-v "${HOME}/.firefox/mozilla:/root/.mozilla" \
		-v "${HOME}/Downloads:/root/Downloads" \
		-v "${HOME}/Pictures:/root/Pictures" \
		-v "${HOME}/Torrents:/root/Torrents" \
		-e "DISPLAY=unix${DISPLAY}" \
		-e GDK_SCALE \
		-e GDK_DPI_SCALE \
		--device /dev/snd \
		--device /dev/dri \
		--name firefox \
		${DOCKER_REPO_PREFIX}/firefox "$@"

	# exit current shell
	exit 0
}
dgcloud(){
	docker run --rm -it \
		-v "${HOME}/.gcloud:/root/.config/gcloud" \
		-v "${HOME}/.ssh:/root/.ssh:ro" \
		-v "$(command -v docker):/usr/bin/docker" \
		-v /var/run/docker.sock:/var/run/docker.sock \
		--name gcloud \
		${DOCKER_REPO_PREFIX}/gcloud "$@"
}
gimp(){
	del_stopped gimp

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e "DISPLAY=unix${DISPLAY}" \
		-v "${HOME}/Pictures:/root/Pictures" \
		-v "${HOME}/.gtkrc:/root/.gtkrc" \
		-e GDK_SCALE \
		-e GDK_DPI_SCALE \
		--name gimp \
		${DOCKER_REPO_PREFIX}/gimp
}
htop(){
	if [[ -n "$(which htop)" ]]; then
		"$(which htop)" "$@"
	else
		docker run --rm -it \
			--pid host \
			--net none \
			--name htop \
			${DOCKER_REPO_PREFIX}/htop
	fi
}
htpasswd(){
	docker run --rm -it \
		--net none \
		--name htpasswd \
		--log-driver none \
		${DOCKER_REPO_PREFIX}/htpasswd "$@"
}
john(){
	local file
	file=$(realpath "$1")

	docker run --rm -it \
		-v "${file}:/root/$(basename "${file}")" \
		${DOCKER_REPO_PREFIX}/john "$@"
}
keypassxc(){
	del_stopped keypassxc

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-v /usr/share/X11/xkb:/usr/share/X11/xkb:ro \
		-e "DISPLAY=unix${DISPLAY}" \
		-v /etc/machine-id:/etc/machine-id:ro \
		--name keypassxc \
		${DOCKER_REPO_PREFIX}/keepassxc
}
libreoffice(){
	del_stopped libreoffice

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e "DISPLAY=unix${DISPLAY}" \
		-v "${HOME}/slides:/root/slides" \
		-e GDK_SCALE \
		-e GDK_DPI_SCALE \
		--name libreoffice \
		${DOCKER_REPO_PREFIX}/libreoffice
}
lpass(){
	docker run --rm -it \
		-v "${HOME}/.lpass:/root/.lpass" \
		--name lpass \
		${DOCKER_REPO_PREFIX}/lpass "$@"
}
lynx(){
	if [[ -n "$(which lynx)" ]]; then
		"$(which lynx)" "$@"
	else
		docker run --rm -it \
			--name lynx \
			${DOCKER_REPO_PREFIX}/lynx "$@"
	fi
}
masscan(){
	docker run -it --rm \
		--log-driver none \
		--net host \
		--cap-add NET_ADMIN \
		--name masscan \
		${DOCKER_REPO_PREFIX}/masscan "$@"
}
mpd(){
	del_stopped mpd

	# adding cap sys_admin so I can use nfs mount
	# the container runs as a unpriviledged user mpd
	docker run -d \
		--device /dev/snd \
		--cap-add SYS_ADMIN \
		-e MPD_HOST=/var/lib/mpd/socket \
		-v /etc/localtime:/etc/localtime:ro \
		-v /etc/exports:/etc/exports:ro \
		-v "${HOME}/.mpd:/var/lib/mpd" \
		-v "${HOME}/.mpd.conf:/etc/mpd.conf" \
		--name mpd \
		${DOCKER_REPO_PREFIX}/mpd
}
neoman(){
	del_stopped neoman

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e "DISPLAY=unix${DISPLAY}" \
		--device /dev/bus/usb \
		--device /dev/usb \
		--name neoman \
		${DOCKER_REPO_PREFIX}/neoman
}
nes(){
	del_stopped nes
	local game=$1

	docker run -d \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e "DISPLAY=unix${DISPLAY}" \
		--device /dev/dri \
		--device /dev/snd \
		--name nes \
		${DOCKER_REPO_PREFIX}/nes "/games/${game}.rom"
}
netcat(){
	docker run --rm -it \
		--net host \
		${DOCKER_REPO_PREFIX}/netcat "$@"
}
nginx(){
	del_stopped nginx

	docker run -d \
		--restart always \
		-v "${HOME}/.nginx:/etc/nginx" \
		--net host \
		--name nginx \
		nginx

	# add domain to hosts & open nginx
	sudo hostess add jess 127.0.0.1
}
nmap2(){
	if [[ -n "$(which nmap)" ]]; then
		"$(which nmap)" "$@"
	else
		docker run --rm -it \
			--net host \
			${DOCKER_REPO_PREFIX}/nmap "$@"
	fi
}
notify_osd(){
	del_stopped notify_osd

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		--net none \
		-v /etc \
		-v /home/user/.dbus \
		-v /home/user/.cache/dconf \
		-e "DISPLAY=unix${DISPLAY}" \
		--name notify_osd \
		${DOCKER_REPO_PREFIX}/notify-osd
}
alias notify-send=notify_send
notify_send(){
	relies_on notify_osd
	local args=${*:2}
	docker exec -i notify_osd notify-send "$1" "${args}"
}
osquery(){
	rmctr osquery

	docker run -d --restart always \
		-v /etc/localtime:/etc/localtime:ro \
		-v /var/run/docker.sock:/var/run/docker.sock \
		-v /etc/os-release:/etc/os-release:ro \
		--net host \
		--ipc host \
		--pid host \
		-e OSQUERY_ENROLL_SECRET \
		--name osquery \
		--privileged \
		${DOCKER_REPO_PREFIX}/osquery \
		--verbose \
		--enroll_secret_env=OSQUERY_ENROLL_SECRET \
		--docker_socket=/var/run/docker.sock \
		--host_identifier=hostname \
		--tls_hostname="${OSQUERY_DOMAIN}" \
		--enroll_tls_endpoint=/api/v1/osquery/enroll \
		--config_plugin=tls \
		--config_tls_endpoint=/api/v1/osquery/config \
		--config_tls_refresh=10 \
		--disable_distributed=false \
		--distributed_plugin=tls \
		--distributed_interval=10 \
		--distributed_tls_max_attempts=3 \
		--distributed_tls_read_endpoint=/api/v1/osquery/distributed/read \
		--distributed_tls_write_endpoint=/api/v1/osquery/distributed/write \
		--logger_plugin=tls \
		--logger_tls_endpoint=/api/v1/osquery/log \
		--logger_tls_period=10
}
pandoc(){
	if [[ -n "$(which pandoc)" ]]; then
		"$(which pandoc)" "$@"
	else
		local file=${*: -1}
		local lfile
		lfile=$(readlink -m "$(pwd)/${file}")
		local rfile
		rfile=$(readlink -m "/$(basename "$file")")
		local args=${*:1:${#@}-1}

		docker run --rm \
			-v "${lfile}:${rfile}" \
			-v /tmp:/tmp \
			--name pandoc \
			${DOCKER_REPO_PREFIX}/pandoc "${args}" "${rfile}"
	fi
}
pivman(){
	del_stopped pivman

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e "DISPLAY=unix${DISPLAY}" \
		--device /dev/bus/usb \
		--device /dev/usb \
		--name pivman \
		${DOCKER_REPO_PREFIX}/pivman
}
pond(){
	del_stopped pond
	relies_on torproxy

	docker run --rm -it \
		--net container:torproxy \
		--name pond \
		${DOCKER_REPO_PREFIX}/pond
}
pulseaudio(){
	del_stopped pulseaudio

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		--device /dev/snd \
		-p 4713:4713 \
		--restart always \
		--group-add audio \
		--name pulseaudio \
		${DOCKER_REPO_PREFIX}/pulseaudio
}
remmina(){
	del_stopped remmina

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e "DISPLAY=unix${DISPLAY}" \
		-e GDK_SCALE \
		-e GDK_DPI_SCALE \
		-v "${HOME}/.remmina:/root/.remmina" \
		--name remmina \
		--net host \
		${DOCKER_REPO_PREFIX}/remmina
}
slack(){
	del_stopped slack

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e "DISPLAY=unix${DISPLAY}" \
		--device /dev/snd \
		--device /dev/dri \
		--device /dev/video0 \
		--group-add audio \
		--group-add video \
		-v "${HOME}/.slack:/root/.config/Slack" \
		--ipc="host" \
		--name slack \
		${DOCKER_REPO_PREFIX}/slack "$@"
}
sshb0t(){
	del_stopped sshb0t

	if [[ ! -d "${HOME}/.ssh" ]]; then
		mkdir -p "${HOME}/.ssh"
	fi

	if [[ ! -f "${HOME}/.ssh/authorized_keys" ]]; then
		touch "${HOME}/.ssh/authorized_keys"
	fi

	GITHUB_USER=${GITHUB_USER:=man715}

	docker run --rm -it \
		--name sshb0t \
		-v "${HOME}/.ssh/authorized_keys:/root/.ssh/authorized_keys" \
		r.j3ss.co/sshb0t \
		--user "${GITHUB_USER}" --keyfile /root/.ssh/authorized_keys --once
}
steam(){
	del_stopped steam
	relies_on pulseaudio

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /etc/machine-id:/etc/machine-id:ro \
		-v /var/run/dbus:/var/run/dbus \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-v "${HOME}/.steam:/home/steam" \
		-e "DISPLAY=unix${DISPLAY}" \
		--link pulseaudio:pulseaudio \
		-e PULSE_SERVER=pulseaudio \
		--device /dev/dri \
		--name steam \
		${DOCKER_REPO_PREFIX}/steam
}
tarsnap(){
	docker run --rm -it \
		-v "${HOME}/.tarsnaprc:/root/.tarsnaprc" \
		-v "${HOME}/.tarsnap:/root/.tarsnap" \
		-v "$HOME:/root/workdir" \
		${DOCKER_REPO_PREFIX}/tarsnap "$@"
}
termboy(){
	del_stopped termboy
	local game=$1

	docker run --rm -it \
		--device /dev/snd \
		--name termboy \
		${DOCKER_REPO_PREFIX}/nes "/games/${game}.rom"
}
torbridge(){
	del_stopped torbridge

	docker run -d \
        --rm \
		--net host \
		--name torbridge \
		man715/tor-bridge

	# set up the redirect iptables rules
	sudo setup-tor-iptables

	# validate we are running through tor
	browser-exec "https://check.torproject.org/"
}
stoptorbridge() {
    sudo setup-tor-iptables

    docker stop torbridge

}
torbrowser(){
	del_stopped torbrowser

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e "DISPLAY=unix${DISPLAY}" \
		-e GDK_SCALE \
		-e GDK_DPI_SCALE \
		--device /dev/snd \
		--name torbrowser \
		${DOCKER_REPO_PREFIX}/tor-browser

	# exit current shell
	exit 0
}
tormessenger(){
	del_stopped tormessenger

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e "DISPLAY=unix${DISPLAY}" \
		-e GDK_SCALE \
		-e GDK_DPI_SCALE \
		--device /dev/snd \
		--name tormessenger \
		${DOCKER_REPO_PREFIX}/tor-messenger

	# exit current shell
	exit 0
}
torproxy(){
	del_stopped torproxy

	docker run -d \
		--restart always \
		-v /etc/localtime:/etc/localtime:ro \
		-p 9050:9050 \
		--name torproxy \
		${DOCKER_REPO_PREFIX}/tor-proxy

	sudo hostess add torproxy "$(docker inspect --format '{{.NetworkSettings.Networks.bridge.IPAddress}}' torproxy)"
}
traceroute(){
	docker run --rm -it \
		--net host \
		${DOCKER_REPO_PREFIX}/traceroute "$@"
}
transmission(){
	del_stopped transmission

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v "${HOME}/Torrents:/transmission/download" \
		-v "${HOME}/.transmission:/transmission/config" \
		-p 9091:9091 \
		-p 51413:51413 \
		-p 51413:51413/udp \
		--name transmission \
		${DOCKER_REPO_PREFIX}/transmission


	sudo hostess add transmission "$(docker inspect --format '{{.NetworkSettings.Networks.bridge.IPAddress}}' transmission)"
	browser-exec "http://transmission:9091"
}
virtualbox(){
	del_stopped virtualbox

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e "DISPLAY=unix${DISPLAY}" \
		--privileged \
		--name virtualbox \
		${DOCKER_REPO_PREFIX}/virtualbox
}
virt_viewer(){
	relies_on kvm

	docker run -it --rm \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix  \
		-e "DISPLAY=unix${DISPLAY}" \
		-v /run/libvirt:/var/run/libvirt \
		-e PULSE_SERVER=pulseaudio \
		--group-add audio \
		--log-driver none \
		--net container:kvm \
		${DOCKER_REPO_PREFIX}/virt-viewer "$@"
}
alias virt-viewer="virt_viewer"
visualstudio(){
	del_stopped visualstudio

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix  \
		-e "DISPLAY=unix${DISPLAY}" \
		--device /dev/dri \
		--name visualstudio \
		${DOCKER_REPO_PREFIX}/vscode
}
alias vscode="visualstudio"
vlc(){
	del_stopped vlc
	relies_on pulseaudio

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e "DISPLAY=unix${DISPLAY}" \
		-e GDK_SCALE \
		-e GDK_DPI_SCALE \
		-e QT_DEVICE_PIXEL_RATIO \
		--link pulseaudio:pulseaudio \
		-e PULSE_SERVER=pulseaudio \
		--group-add audio \
		--group-add video \
		-v "${HOME}/Torrents:/home/vlc/Torrents" \
		--device /dev/dri \
		--name vlc \
		${DOCKER_REPO_PREFIX}/vlc
}
watchman(){
	del_stopped watchman

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v "${HOME}/Downloads:/root/Downloads" \
		--name watchman \
		${DOCKER_REPO_PREFIX}/watchman --foreground
}
weematrix(){
	del_stopped weematrix

	docker run --rm -it \
		--user root \
		-v "${HOME}/.weechat:/home/user/.weechat" \
		${DOCKER_REPO_PREFIX}/weechat-matrix \
		chown -R user /home/user/.weechat

	docker run --rm -it \
		-v /etc/localtime:/etc/localtime:ro \
		-v "${HOME}/.weechat:/home/user/.weechat" \
		-e "TERM=screen" \
		--name weematrix \
		${DOCKER_REPO_PREFIX}/weechat-matrix
}
weeslack(){
	del_stopped weeslack

	docker run --rm -it \
		--user root \
		-v "${HOME}/.weechat:/home/user/.weechat" \
		${DOCKER_REPO_PREFIX}/wee-slack \
		chown -R user /home/user/.weechat

	docker run --rm -it \
		-v /etc/localtime:/etc/localtime:ro \
		-v "${HOME}/.weechat:/home/user/.weechat" \
		--name weeslack \
		${DOCKER_REPO_PREFIX}/wee-slack
}
wg(){
	docker run -i --rm \
		--log-driver none \
		-v /tmp:/tmp \
		--cap-add NET_ADMIN \
		--net host \
		--name wg \
		${DOCKER_REPO_PREFIX}/wg "$@"
}
wireshark(){
	del_stopped wireshark

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e "DISPLAY=unix${DISPLAY}" \
		--cap-add NET_RAW \
		--cap-add NET_ADMIN \
		--net host \
		--name wireshark \
		${DOCKER_REPO_PREFIX}/wireshark
}
wrk(){
	docker run -it --rm \
		--log-driver none \
		--name wrk \
		${DOCKER_REPO_PREFIX}/wrk "$@"
}
ykman(){
	del_stopped ykman

	if [[ -n "$(which ykman)" ]]; then
		"$(which ykman)" "$@"
	else
		docker run --rm -it \
			-v /etc/localtime:/etc/localtime:ro \
			--device /dev/usb \
			--device /dev/bus/usb \
			--name ykman \
			${DOCKER_REPO_PREFIX}/ykman bash
	fi
}
ykpersonalize(){
	del_stopped ykpersonalize

	if [[ -n "$(which ykpersonalize)" ]]; then
		"$(which ykpersonalize)" "$@"
	else
		docker run --rm -it \
			-v /etc/localtime:/etc/localtime:ro \
			--device /dev/usb \
			--device /dev/bus/usb \
			--name ykpersonalize \
			${DOCKER_REPO_PREFIX}/ykpersonalize bash
	fi
}
yubico_piv_tool(){
	del_stopped yubico-piv-tool

	if [[ -n "$(which yubico-piv-tool)" ]]; then
		"$(which yubico-piv-tool)" "$@"
	else
		docker run --rm -it \
			-v /etc/localtime:/etc/localtime:ro \
			--device /dev/usb \
			--device /dev/bus/usb \
			--name yubico-piv-tool \
			${DOCKER_REPO_PREFIX}/yubico-piv-tool bash
	fi
}
alias yubico-piv-tool="yubico_piv_tool"
